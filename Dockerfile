# Stage 1: Build the Rust web-server
FROM rust:1.82 as rust_builder

WORKDIR /usr/src/app

# Install pnpm for rspc bindings generation (if needed during backend build)
# RUN curl -fsSL https://get.pnpm.io/install.sh | sh -
# The bindings are generated by the web-server itself when it's built with the correct rspc config.
# So, direct pnpm might not be needed here if the path is relative and src/ is copied later for vite.

# Copy common workspace files first if src-core and web-server are part of a Cargo workspace
# For example, if there's a root Cargo.toml for the workspace:
# COPY Cargo.toml Cargo.lock ./
# COPY .cargo ./.cargo

# Copy src-core and web-server
COPY src-core ./src-core
COPY web-server ./web-server

# Ensure DATABASE_URL is available at build time if your build script or any proc macro needs it.
# For runtime, it will be passed as an environment variable.
# ARG DATABASE_URL_ARG
# ENV DATABASE_URL=$DATABASE_URL_ARG

# Build the web-server
# This will also generate the bindings.ts file in ../src/bindings.ts (relative to web-server/Cargo.toml)
RUN cd web-server && cargo build --release --locked

# Stage 2: Build the Frontend
FROM node:20-slim as frontend_builder

WORKDIR /usr/src/app

# Copy package manager files
COPY package.json pnpm-lock.yaml ./

# Install pnpm
RUN npm install -g pnpm

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy the rest of the frontend code
# This includes src/, public/, vite.config.ts, etc.
COPY . .

# Before building the frontend, we need the bindings.ts generated by the Rust build.
# Copy it from the rust_builder stage.
# The path in web-server/src/router.rs for bindings is "../src/bindings.ts"
# So, after `cargo build` in `web-server`, it should be at /usr/src/app/src/bindings.ts
COPY --from=rust_builder /usr/src/app/src/bindings.ts ./src/bindings.ts

# Build the frontend for web environment
# Set VITE_RUN_ENV to WEB so that getRunEnv() in the frontend returns RUN_ENV.WEB
# Also set VITE_API_URL if your http client expects it (defaults to localhost:4000/rspc)
ARG VITE_API_URL_ARG=http://localhost:4000/rspc
ENV VITE_RUN_ENV=WEB
ENV VITE_API_URL=$VITE_API_URL_ARG
RUN pnpm build

# Stage 3: Create the Runtime Container
# Using a small image like debian-slim. Distroless is an option for even smaller images.
# Using debian:stable-slim as it's more common and includes ca-certificates.
FROM debian:stable-slim

WORKDIR /app

# Install ca-certificates for HTTPS/TLS if the app needs to make outbound requests
RUN apt-get update && apt-get install -y ca-certificates && rm -rf /var/lib/apt/lists/*

# Set environment variables
# DATABASE_URL needs to be provided when running the container
ENV DATABASE_URL=""
# RUST_LOG for logging level, e.g., info, debug
ENV RUST_LOG="info,web_server=debug,rspc=debug"
# PORT for the web server
ENV PORT=4000

# Copy the web-server binary from the rust_builder stage
COPY --from=rust_builder /usr/src/app/web-server/target/release/web-server .

# Copy the built frontend assets from the frontend_builder stage
COPY --from=frontend_builder /usr/src/app/dist ./dist

# Expose the port the server will listen on
EXPOSE 4000

# Command to run the application
# The web-server should be configured to serve static files from ./dist if that stretch goal is implemented.
# Otherwise, this just runs the API server.
CMD ["./web-server"]
