// src/bindings.ts
// WARNING: THIS IS A MANUALLY CRAFTED PLACEHOLDER BASED ON router.rs
// Actual bindings should be generated by rspc when web-server compiles.

// Import types from the application if they are shared.
// This assumes that types like Account, NewAccount etc. are available for import
// from '@/lib/types' or similar paths. Adjust paths as needed.
// For simplicity, some complex types might be 'any' here if not readily importable.
import type {
  Account, NewAccount, AccountUpdate,
  Activity, ActivityDetails, ActivityCreate, ActivityUpdate, ActivitySearchResponse, // Already used by activityClient
  Asset, AssetData, UpdateAssetProfile,
  ExchangeRate, NewExchangeRate,
  Goal, GoalsAllocation, NewGoal,
  ContributionLimit, NewContributionLimit, DepositsCalculation,
  Quote, QuoteSummary, MarketDataProviderInfo,
  Settings, SettingsUpdate,
  Holding,
  IncomeSummary,
  DailyAccountValuation,
  PerformanceMetrics, SimplePerformanceMetrics
} from '@/lib/types'; // Assuming these align with core types

// Helper types for router inputs, mirroring Rust structs if needed
export interface SearchActivitiesArgs { // From web-server/src/router.rs
  page: number;
  pageSize: number;
  account_id_filter?: string[];
  activity_type_filter?: string[];
  asset_id_keyword?: string;
  sort?: { id: string; desc: boolean };
}

export interface DateRangeArgs {
    start_date?: string;
    end_date?: string;
}

export interface ItemDateRangeArgs extends DateRangeArgs {
    item_id: string;
}

export interface TypedItemDateRangeArgs extends ItemDateRangeArgs {
    item_type: string;
}


// Define Procedures based on router.rs structure
export type Procedures = {
  queries:
    // Activity Service (ensure namespaced)
    | { key: "activities.getAll", input: void, result: ActivityDetails[] } // Assuming ActivityDetails from existing client
    | { key: "activities.search", input: SearchActivitiesArgs, result: ActivitySearchResponse }

    // Account Service
    | { key: "accounts.getAll", input: void, result: Account[] }
    | { key: "accounts.getActive", input: void, result: Account[] }

    // Asset Service
    | { key: "assets.getData", input: string, result: AssetData } // input: asset_id

    // Goal Service
    | { key: "goals.getAll", input: void, result: Goal[] }
    | { key: "goals.loadAllocations", input: void, result: GoalsAllocation[] }

    // Limits Service
    | { key: "limits.getContributionLimits", input: void, result: ContributionLimit[] }
    | { key: "limits.calculateDeposits", input: string, result: DepositsCalculation } // input: limit_id

    // MarketData Service
    | { key: "marketData.searchSymbol", input: string, result: QuoteSummary[] } // input: query
    | { key: "marketData.getQuoteHistory", input: string, result: Quote[] } // input: symbol
    | { key: "marketData.getProviders", input: void, result: MarketDataProviderInfo[] }

    // Portfolio Service
    | { key: "portfolio.getHoldings", input: string, result: Holding[] } // input: account_id
    | { key: "portfolio.getHolding", input: [string, string], result: Holding | null } // input: [account_id, asset_id]
    | { key: "portfolio.getHistoricalValuations", input: ItemDateRangeArgs, result: DailyAccountValuation[] }
    | { key: "portfolio.getIncomeSummary", input: void, result: IncomeSummary[] }
    | { key: "portfolio.calculateSimplePerformance", input: string[], result: SimplePerformanceMetrics[] } // input: account_ids
    | { key: "portfolio.calculatePerformanceHistory", input: TypedItemDateRangeArgs, result: PerformanceMetrics }
    | { key: "portfolio.calculatePerformanceSummary", input: TypedItemDateRangeArgs, result: PerformanceMetrics }

    // Settings Service
    | { key: "settings.get", input: void, result: Settings }
    | { key: "settings.getExchangeRates", input: void, result: ExchangeRate[] }

  mutations:
    // Activity Service (ensure namespaced)
    | { key: "activities.create", input: ActivityCreate, result: Activity } // Assuming ActivityCreate from existing client
    | { key: "activities.update", input: ActivityUpdate, result: Activity } // Assuming ActivityUpdate
    | { key: "activities.delete", input: string, result: Activity } // input: activity_id

    // Account Service
    | { key: "accounts.create", input: NewAccount, result: Account }
    | { key: "accounts.update", input: AccountUpdate, result: Account }
    | { key: "accounts.delete", input: string, result: void } // input: account_id

    // Asset Service
    | { key: "assets.updateProfile", input: [string, UpdateAssetProfile], result: Asset } // input: [asset_id, payload]
    | { key: "assets.updateDataSource", input: [string, string], result: Asset } // input: [asset_id, data_source]

    // Goal Service
    | { key: "goals.create", input: NewGoal, result: Goal }
    | { key: "goals.update", input: Goal, result: Goal }
    | { key: "goals.delete", input: string, result: number } // input: goal_id, result: rows affected
    | { key: "goals.updateAllocations", input: GoalsAllocation[], result: number } // result: rows affected

    // Limits Service
    | { key: "limits.createContributionLimit", input: NewContributionLimit, result: ContributionLimit }
    | { key: "limits.updateContributionLimit", input: [string, NewContributionLimit], result: ContributionLimit } // input: [limit_id, payload]
    | { key: "limits.deleteContributionLimit", input: string, result: void } // input: limit_id

    // MarketData Service
    | { key: "marketData.requestSync", input: [Option<string[]>, boolean] | undefined, result: void } // input: [symbols, refetch_all] - Placeholder
    | { key: "marketData.updateQuote", input: Quote, result: void }
    | { key: "marketData.deleteQuote", input: string, result: void } // input: quote_id

    // Portfolio Service
    | { key: "portfolio.requestRecalculate", input: void, result: void } // Placeholder
    | { key: "portfolio.requestUpdate", input: void, result: void } // Placeholder

    // Settings Service
    | { key: "settings.update", input: SettingsUpdate, result: Settings }
    | { key: "settings.addExchangeRate", input: NewExchangeRate, result: ExchangeRate }
    | { key: "settings.updateExchangeRate", input: ExchangeRate, result: ExchangeRate }
    | { key: "settings.deleteExchangeRate", input: string, result: void } // input: rate_id
};

// Helper for optional types if not using a library like Zod/Valibot with rspc
type Option<T> = T | null | undefined;
